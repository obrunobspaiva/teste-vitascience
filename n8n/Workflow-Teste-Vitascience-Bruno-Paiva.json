{
  "name": "Workflow-Teste-Vitascience-Bruno-Paiva",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lead/analyze",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -624,
        0
      ],
      "id": "a243991c-b302-4c6f-a4f3-ac6a67fded82",
      "name": "Webhook",
      "webhookId": "78be629e-0a26-404c-a272-a5807af6f360"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const text = ($('Webhook').item.json.body.lead_text || '').toString().trim();\n\nif (!text) {\n  throw new Error('lead_text ausente');\n}\n\n\n\nconst meta = {\n  language: 'pt-BR',\n  audience_hint: JSON.parse($json.choices[0].message.content).audience,\n};\n\nreturn {\n  lead_text: text.slice(0, 30000),\n  meta\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        608,
        0
      ],
      "id": "01ea712f-e4d9-42c3-86e5-81bcb28334be",
      "name": "Fn Sanitize & Meta"
    },
    {
      "parameters": {
        "jsCode": "const lead = $node['Fn Sanitize & Meta'].json;\nconst emb = $json.data?.[0]?.embedding;\nif (!emb) throw new Error('embedding não retornado');\nreturn [{ lead_text: lead.lead_text, meta: lead.meta, embedding: emb }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        0
      ],
      "id": "ac08fea5-80bb-4011-b217-0e97476b1e83",
      "name": "Fn Merge Embedding"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('data').item.json.SUPABASE_URL }}/rest/v1/rpc/match_ba_chunks",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query_embedding\": [{{$json[\"embedding\"]}}],\n  \"match_count\": 12\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1232,
        0
      ],
      "id": "298c6b1c-41c2-4e4a-8b36-cbbdf36021cc",
      "name": "Supabase Match BA",
      "credentials": {
        "httpHeaderAuth": {
          "id": "ylK1OUfmTScIdNcu",
          "name": "supabase-vitascience"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('data').item.json.OPENAI_URL }}/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-mini\",\n  \"temperature\": 0.2,\n  \"response_format\": { \"type\": \"json_object\" },\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Você é um avaliador de copy no estilo Eugene Schwartz. Escala: 1=Mais consciente, 2=Produto-consciente, 3=Solução-consciente, 4=Problema-consciente, 5=Desconhecedor. Responda SOMENTE JSON: {\\\"level\\\":<int>,\\\"reason\\\":\\\"...\\\"}.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Lead:\\n{{ $('Fn Sanitize & Meta').item.json.lead_text }}\\n\\nContexto BA (top-12): {{ JSON.stringify($node['Supabase Match BA'].json).replaceAll('\"', \"'\") }}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1440,
        0
      ],
      "id": "0ad26fe5-dada-42b8-bd4c-0a788e8a928a",
      "name": "LLM Classifier",
      "credentials": {
        "httpHeaderAuth": {
          "id": "sRyeCXNXFtzIrBEY",
          "name": "apikey-openAI"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('data').item.json.OPENAI_URL }}/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-mini\",\n  \"temperature\": 0.2,\n  \"response_format\": { \"type\": \"json_object\" },\n  \"messages\": [\n    {\n      \"role\": \"system\",      \n      \"content\": \"Identifique frameworks de copy presentes (PAS, AIDA, 4P, BAB, Big Idea). Responda SOMENTE JSON: {\\\"frameworks_detected\\\":[...],\\\"evidence\\\":[{\\\"framework\\\":\\\"AIDA\\\",\\\"snippet\\\":\\\"...\\\"}]}.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Lead:\\n{{ $('Fn Sanitize & Meta').item.json.lead_text }}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1648,
        0
      ],
      "id": "cdbd2f46-9233-44ca-9510-9bb6fe3c7efd",
      "name": "LLM Dissector",
      "credentials": {
        "httpHeaderAuth": {
          "id": "sRyeCXNXFtzIrBEY",
          "name": "apikey-openAI"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('data').item.json.OPENAI_URL }}/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-mini\",\n  \"temperature\": 0.3,\n  \"response_format\": { \"type\": \"json_object\" },\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Atue como Eugene Schwartz. Liste no mínimo 5 melhorias. Responda SOMENTE JSON como array: [{\\\"issue\\\":\\\"...\\\",\\\"why\\\":\\\"...\\\",\\\"how_eugene_fixes\\\":\\\"...\\\",\\\"rewrite_example\\\":\\\"...\\\"}]. Foque clareza, prova, mecanismo, especificidade, ética.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Lead:\\n{{ $('Fn Sanitize & Meta').item.json.lead_text }}\\n\\nNível (JSON do classificador):\\n{{ $('LLM Classifier').item.json.choices[0].message.content.replaceAll('\"', \"'\") }}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1840,
        0
      ],
      "id": "a79fa15a-1f3b-44d3-8172-a37117a5b64d",
      "name": "LLM Critic",
      "credentials": {
        "httpHeaderAuth": {
          "id": "sRyeCXNXFtzIrBEY",
          "name": "apikey-openAI"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('data').item.json.OPENAI_URL }}/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-mini\",\n  \"temperature\": 0.6,\n  \"response_format\": { \"type\": \"json_object\" },\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Crie no mínimo 3 novos ângulos para níveis diferentes. Responda SOMENTE JSON: [{\\\"level_target\\\":<int>,\\\"angle\\\":\\\"...\\\",\\\"headlines\\\":[\\\"...\\\"],\\\"rationale\\\":\\\"...\\\"}].\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Lead:\\n{{ $('Fn Sanitize & Meta').item.json.lead_text }}\"\n    }\n  ]\n}\n",
        "options": {
          "timeout": 1200000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2032,
        0
      ],
      "id": "a4b9199f-c1ba-4f0a-8ecc-edb855eedbcf",
      "name": "LLM Angles",
      "retryOnFail": false,
      "credentials": {
        "httpHeaderAuth": {
          "id": "sRyeCXNXFtzIrBEY",
          "name": "apikey-openAI"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const scale_definition = {\n  1: 'Mais Consciente (Product-aware/Most aware)',\n  2: 'Produto-consciente',\n  3: 'Solução-consciente',\n  4: 'Problema-consciente',\n  5: 'Desconhecedor (Unaware)'\n};\n\nconst safeParse = (s) => {\n  try { return JSON.parse(s); } catch (e) { throw new Error('Falha ao parsear JSON LLM: ' + e.message); }\n};\n\nconst cls = safeParse($('LLM Classifier').first().json.choices[0].message.content);\nconst dis = safeParse($('LLM Dissector').first().json.choices[0].message.content);\nconst crt = safeParse($('LLM Critic').first().json.choices[0].message.content);\nconst ang = safeParse($input.first().json.choices[0].message.content);\n\nconst analysis = {\n  scale_definition,\n  level: cls.level,\n  level_reason: cls.reason,\n  structure: dis,\n  improvements: crt,\n  new_angles: ang\n};\n\nreturn [{ analysis }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        0
      ],
      "id": "10796d4d-fca7-4357-8e14-2803aa52473f",
      "name": "Fn Merge Output",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "function md5(input) {\n  function RotateLeft(lValue, iShiftBits) {\n    return (lValue<<iShiftBits) | (lValue>>>(32-iShiftBits));\n  }\n  function AddUnsigned(lX,lY){\n    let lX4,lY4,lX8,lY8,lResult;\n    lX8=(lX&0x80000000);lY8=(lY&0x80000000);\n    lX4=(lX&0x40000000);lY4=(lY&0x40000000);\n    lResult=(lX&0x3FFFFFFF)+(lY&0x3FFFFFFF);\n    if(lX4&lY4)return (lResult^0x80000000^lX8^lY8);\n    if(lX4|lY4){\n      if(lResult&0x40000000)return (lResult^0xC0000000^lX8^lY8);\n      else return (lResult^0x40000000^lX8^lY8);\n    } else return (lResult^lX8^lY8);\n  }\n  function F(x,y,z){return (x&y)|((~x)&z);}\n  function G(x,y,z){return (x&z)|(y&(~z));}\n  function H(x,y,z){return (x^y^z);}\n  function I(x,y,z){return (y^(x|(~z)));}\n  function FF(a,b,c,d,x,s,ac){a=AddUnsigned(a,AddUnsigned(AddUnsigned(F(b,c,d),x),ac));return AddUnsigned(RotateLeft(a,s),b);}\n  function GG(a,b,c,d,x,s,ac){a=AddUnsigned(a,AddUnsigned(AddUnsigned(G(b,c,d),x),ac));return AddUnsigned(RotateLeft(a,s),b);}\n  function HH(a,b,c,d,x,s,ac){a=AddUnsigned(a,AddUnsigned(AddUnsigned(H(b,c,d),x),ac));return AddUnsigned(RotateLeft(a,s),b);}\n  function II(a,b,c,d,x,s,ac){a=AddUnsigned(a,AddUnsigned(AddUnsigned(I(b,c,d),x),ac));return AddUnsigned(RotateLeft(a,s),b);}\n  function ConvertToWordArray(str){\n    let lWordCount;\n    const lMessageLength=str.length;\n    const lNumberOfWords_temp1=lMessageLength+8;\n    const lNumberOfWords_temp2=(lNumberOfWords_temp1-(lNumberOfWords_temp1%64))/64;\n    const lNumberOfWords=(lNumberOfWords_temp2+1)*16;\n    const lWordArray=Array(lNumberOfWords-1);\n    let lBytePosition=0;\n    let lByteCount=0;\n    while(lByteCount<lMessageLength){\n      lWordCount=(lByteCount-(lByteCount%4))/4;\n      lBytePosition=(lByteCount%4)*8;\n      lWordArray[lWordCount]=(lWordArray[lWordCount]|(str.charCodeAt(lByteCount)<<lBytePosition));\n      lByteCount++;\n    }\n    lWordCount=(lByteCount-(lByteCount%4))/4;\n    lBytePosition=(lByteCount%4)*8;\n    lWordArray[lWordCount]=lWordArray[lWordCount]|(0x80<<lBytePosition);\n    lWordArray[lNumberOfWords-2]=lMessageLength<<3;\n    lWordArray[lNumberOfWords-1]=lMessageLength>>>29;\n    return lWordArray;\n  }\n  function WordToHex(lValue){\n    let WordToHexValue=\"\",WordToHexValue_temp=\"\",lByte,lCount;\n    for(lCount=0;lCount<=3;lCount++){\n      lByte=(lValue>>>(lCount*8))&255;\n      WordToHexValue_temp=\"0\"+lByte.toString(16);\n      WordToHexValue=WordToHexValue+WordToHexValue_temp.substr(WordToHexValue_temp.length-2,2);\n    }\n    return WordToHexValue;\n  }\n  let x=Array();\n  let k,AA,BB,CC,DD,a,b,c,d;\n  const S11=7,S12=12,S13=17,S14=22;\n  const S21=5,S22=9 ,S23=14,S24=20;\n  const S31=4,S32=11,S33=16,S34=23;\n  const S41=6,S42=10,S43=15,S44=21;\n  x=ConvertToWordArray(input);\n  a=0x67452301;b=0xEFCDAB89;c=0x98BADCFE;d=0x10325476;\n  for(k=0;k<x.length;k+=16){\n    AA=a;BB=b;CC=c;DD=d;\n    a=FF(a,b,c,d,x[k+0], S11,0xD76AA478);\n    d=FF(d,a,b,c,x[k+1], S12,0xE8C7B756);\n    c=FF(c,d,a,b,x[k+2], S13,0x242070DB);\n    b=FF(b,c,d,a,x[k+3], S14,0xC1BDCEEE);\n    a=FF(a,b,c,d,x[k+4], S11,0xF57C0FAF);\n    d=FF(d,a,b,c,x[k+5], S12,0x4787C62A);\n    c=FF(c,d,a,b,x[k+6], S13,0xA8304613);\n    b=FF(b,c,d,a,x[k+7], S14,0xFD469501);\n    a=FF(a,b,c,d,x[k+8], S11,0x698098D8);\n    d=FF(d,a,b,c,x[k+9], S12,0x8B44F7AF);\n    c=FF(c,d,a,b,x[k+10],S13,0xFFFF5BB1);\n    b=FF(b,c,d,a,x[k+11],S14,0x895CD7BE);\n    a=FF(a,b,c,d,x[k+12],S11,0x6B901122);\n    d=FF(d,a,b,c,x[k+13],S12,0xFD987193);\n    c=FF(c,d,a,b,x[k+14],S13,0xA679438E);\n    b=FF(b,c,d,a,x[k+15],S14,0x49B40821);\n    a=GG(a,b,c,d,x[k+1], S21,0xF61E2562);\n    d=GG(d,a,b,c,x[k+6], S22,0xC040B340);\n    c=GG(c,d,a,b,x[k+11],S23,0x265E5A51);\n    b=GG(b,c,d,a,x[k+0], S24,0xE9B6C7AA);\n    a=GG(a,b,c,d,x[k+5], S21,0xD62F105D);\n    d=GG(d,a,b,c,x[k+10],S22,0x2441453);\n    c=GG(c,d,a,b,x[k+15],S23,0xD8A1E681);\n    b=GG(b,c,d,a,x[k+4], S24,0xE7D3FBC8);\n    a=GG(a,b,c,d,x[k+9], S21,0x21E1CDE6);\n    d=GG(d,a,b,c,x[k+14],S22,0xC33707D6);\n    c=GG(c,d,a,b,x[k+3], S23,0xF4D50D87);\n    b=GG(b,c,d,a,x[k+8], S24,0x455A14ED);\n    a=GG(a,b,c,d,x[k+13],S21,0xA9E3E905);\n    d=GG(d,a,b,c,x[k+2], S22,0xFCEFA3F8);\n    c=GG(c,d,a,b,x[k+7], S23,0x676F02D9);\n    b=GG(b,c,d,a,x[k+12],S24,0x8D2A4C8A);\n    a=HH(a,b,c,d,x[k+5], S31,0xFFFA3942);\n    d=HH(d,a,b,c,x[k+8], S32,0x8771F681);\n    c=HH(c,d,a,b,x[k+11],S33,0x6D9D6122);\n    b=HH(b,c,d,a,x[k+14],S34,0xFDE5380C);\n    a=HH(a,b,c,d,x[k+1], S31,0xA4BEEA44);\n    d=HH(d,a,b,c,x[k+4], S32,0x4BDECFA9);\n    c=HH(c,d,a,b,x[k+7], S33,0xF6BB4B60);\n    b=HH(b,c,d,a,x[k+10],S34,0xBEBFBC70);\n    a=HH(a,b,c,d,x[k+13],S31,0x289B7EC6);\n    d=HH(d,a,b,c,x[k+0], S32,0xEAA127FA);\n    c=HH(c,d,a,b,x[k+3], S33,0xD4EF3085);\n    b=HH(b,c,d,a,x[k+6], S34,0x04881D05);\n    a=HH(a,b,c,d,x[k+9], S31,0xD9D4D039);\n    d=HH(d,a,b,c,x[k+12],S32,0xE6DB99E5);\n    c=HH(c,d,a,b,x[k+15],S33,0x1FA27CF8);\n    b=HH(b,c,d,a,x[k+2], S34,0xC4AC5665);\n    a=II(a,b,c,d,x[k+0], S41,0xF4292244);\n    d=II(d,a,b,c,x[k+7], S42,0x432AFF97);\n    c=II(c,d,a,b,x[k+14],S43,0xAB9423A7);\n    b=II(b,c,d,a,x[k+5], S44,0xFC93A039);\n    a=II(a,b,c,d,x[k+12],S41,0x655B59C3);\n    d=II(d,a,b,c,x[k+3], S42,0x8F0CCC92);\n    c=II(c,d,a,b,x[k+10],S43,0xFFEFF47D);\n    b=II(b,c,d,a,x[k+1], S44,0x85845DD1);\n    a=II(a,b,c,d,x[k+8], S41,0x6FA87E4F);\n    d=II(d,a,b,c,x[k+13],S42,0xFE2CE6E0);\n    c=II(c,d,a,b,x[k+2], S43,0xA3014314);\n    b=II(b,c,d,a,x[k+7], S44,0x4E0811A1);\n    a=II(a,b,c,d,x[k+14],S41,0xF7537E82);\n    d=II(d,a,b,c,x[k+5], S42,0xAB9423A7);\n    c=II(c,d,a,b,x[k+12],S43,0xFC93A039);\n    b=II(b,c,d,a,x[k+3], S44,0x655B59C3);\n    a=II(a,b,c,d,x[k+10],S41,0x8F0CCC92);\n    d=II(d,a,b,c,x[k+1], S42,0xFFEFF47D);\n    c=II(c,d,a,b,x[k+8], S43,0x895CD7BE);\n    b=II(b,c,d,a,x[k+13],S44,0x6B901122);\n    a=AddUnsigned(a,AA);\n    b=AddUnsigned(b,BB);\n    c=AddUnsigned(c,CC);\n    d=AddUnsigned(d,DD);\n  }\n  const temp=WordToHex(a)+WordToHex(b)+WordToHex(c)+WordToHex(d);\n  return temp.toLowerCase();\n}\n\nconst lead = $('Webhook').first().json.body.lead_text || '';\nconst lead_hash = md5(lead);\n\nreturn [{\n  lead_hash\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        0
      ],
      "id": "b7ffdc6d-21ed-4b38-9c08-0240a17acbf0",
      "name": "Fn Lead Hash"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "41743aaf-0e41-4989-bddf-7c8d9bc16122",
              "name": "SUPABASE_URL",
              "value": "https://nzznawqbtmhkdnbqhwqq.supabase.co",
              "type": "string"
            },
            {
              "id": "0af62e8f-9c6f-4eb8-a9cc-dea5bafdd229",
              "name": "OPENAI_URL",
              "value": "https://api.openai.com/v1",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -416,
        0
      ],
      "id": "98911643-31de-47d1-bed8-9692595cec45",
      "name": "data"
    },
    {
      "parameters": {
        "tableId": "analyses",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "lead_hash",
              "fieldValue": "={{ $('Fn Lead Hash').first().json.lead_hash }}"
            },
            {
              "fieldId": "analysis_json",
              "fieldValue": "={{ JSON.stringify($json.analysis).replaceAll('\"', \"'\") }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        2448,
        0
      ],
      "id": "972512c4-fd66-41c6-a252-318646c156ca",
      "name": "Supabase Upsert Analysis",
      "credentials": {
        "supabaseApi": {
          "id": "uGRc6erThpmfRQy3",
          "name": "supabase-vitascience"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-mini\",\n  \"temperature\": 0,\n  \"response_format\": { \"type\": \"json_object\" },\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"Você é um classificador de audiência. Leia o texto fornecido e identifique a audiência principal. Responda SOMENTE em JSON no formato: {\\\"audience\\\":\\\"[sexo] [range-idade], [objetivo]\\\"}\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Lead:\\n{{ $('Webhook').item.json.body.lead_text }}\"\n    }\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        416,
        0
      ],
      "id": "c4a9a726-bbb1-4c46-bd28-97ee19ec7b75",
      "name": "LLM audience",
      "credentials": {
        "httpHeaderAuth": {
          "id": "sRyeCXNXFtzIrBEY",
          "name": "apikey-openAI"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('data').item.json.OPENAI_URL }}/embeddings",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"text-embedding-3-small\",\n  \"input\": \"{{$node['Fn Sanitize & Meta'].json.lead_text}}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        816,
        0
      ],
      "id": "76cd4b9b-76d1-44e4-8388-129252a6e909",
      "name": "LLM Embedding (lead)",
      "credentials": {
        "httpHeaderAuth": {
          "id": "sRyeCXNXFtzIrBEY",
          "name": "apikey-openAI"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "63d3710a-c4bc-425c-a9cb-520297ad26bb",
              "leftValue": "={{ $json.lead_hash }}",
              "rightValue": "=",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            },
            {
              "id": "819cf2e9-c253-4058-a89b-72754f8fe1ad",
              "leftValue": "={{ $json.lead_hash }}",
              "rightValue": "null",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "2c06a17a-a890-4736-8435-dd8117af58b0",
              "leftValue": "={{ $json.lead_hash }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        208,
        0
      ],
      "id": "0941b648-d975-4f86-8a7a-35f6beab2a35",
      "name": "If"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "analyses",
        "filters": {
          "conditions": [
            {
              "keyName": "lead_hash",
              "keyValue": "={{ $json.lead_hash }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "92ec980d-833a-4a8a-9304-73b03fa19e6c",
      "name": "Get Analysis",
      "executeOnce": false,
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "uGRc6erThpmfRQy3",
          "name": "supabase-vitascience"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [\n  {\n    json: {\n      message: \"A análise para este lead já foi processada anteriormente\"\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        160
      ],
      "id": "dc8fce90-47ce-4f88-aafd-dcd13a101fb4",
      "name": "Code in JavaScript",
      "alwaysOutputData": true
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "project-neosale-n8n-new.lkqho4.easypanel.host",
            "user-agent": "curl/8.4.0",
            "content-length": "174",
            "accept": "*/*",
            "content-type": "application/json",
            "x-forwarded-for": "189.34.178.171",
            "x-forwarded-host": "project-neosale-n8n-new.lkqho4.easypanel.host",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "3d3e3f4fd37c",
            "x-real-ip": "189.34.178.171",
            "accept-encoding": "gzip"
          },
          "params": {},
          "query": {},
          "body": {
            "lead_text": "Na noite do ano de 1785, Antoine Lavoisier, um químico brilhante e famoso, descobriu o caminho para emagrecer sem sacrifícios. Essa descoberta, que ficou escondida até hoje, é a chave para toda mulher perder a gordura da barriga, culote e papada… dizendo ADEUS ao efeito sanfona. Independente se já passou dos 40 anos ou se precisa eliminar 5, 10 ou mais quilos. Por trás dessa descoberta, está a verdadeira razão: 1 — Da atividade física não emagrecer por si só. Fonte: https://pubmed.ncbi.nlm.nih.gov/9738131/ 2 — O porquê a maioria das pessoas que fazem bariátrica engordam tudo de novo. 3 — E por que tomar remédios pra emagrecer acaba em efeito sanfona e aumentam o risco de desenvolver diabete. Fonte: https://www1.folha.uol.com.br/equilibrio/2023/02/reganho-de-peso-e-glicemia-alta-sao-efeitos-comuns-apos-tratamento-com-semaglutida.shtml Lavoisier descobriu que, pra perder peso, não adianta fazer horas de atividade física… se submeter a dietas altamente restritivas, cortar carboidratos, gorduras e açúcar… colocar sua vida em risco com cirurgias caras como bariátrica e lipoaspiração… ou tomar pílulas milagrosas. Na verdade, ele descobriu que existe um processo no corpo capaz de transformar a gordura em gás. É isso mesmo: você pode simplesmente fazer sua gordura evaporar e perder 5, 10 ou mais quilos. E o melhor: basta tomar um poderoso suco que fica pronto em 15 segundos. Já imaginou isso? Você podendo se olhar no espelho e gostar de verdade do seu corpo… se sentir mais bonita e feliz por ser magra… vestir qualquer roupa sem se preocupar se a barriga marca ou o braço está gordo… até voltar a usar roupas que estavam guardadas. Então, se prepare: é muito rápido fazer a gordura virar gás e emagrecer sem sofrimento. Não importa quantos quilos precisa eliminar, sua idade, onde você mora, sua genética ou metabolismo. A partir de agora, emagrecer será apenas uma questão de DIAS quando você descobrir como transformar a gordura em gás tomando esse suco de 15 segundos. Ainda neste vídeo vou te mostrar como preparar e usar esse suco aí mesmo da sua casa. Com esse hábito, você pode eliminar 2, 5 ou até mais quilos no primeiro mês, sem precisar necessariamente fazer exercícios. O mais importante: você vai abandonar pensamentos como 'dietas não funcionam pra mim' ou 'meu corpo mudou, nunca vou conseguir emagrecer sem passar fome'. Quando começar a ver a barriga diminuir, ficará fácil manter o peso ideal pelo tempo que quiser. Assim, finalmente, vai se libertar do ciclo de tentativas frustradas. Então, preste atenção em tudo o que vou revelar agora. Se você ainda não me conhece, meu nome é Dayan Siebra, tenho o maior canal de saúde em português, com quase 7 milhões de inscritos. Já ajudei mais de 30 mil pessoas a emagrecerem de forma saudável e definitiva. Mas preciso ser sincero… durante muito tempo eu só me preocupava em trabalhar e fazer dinheiro. Aos 35 anos eu era obeso, estressado, dormia pouco, trabalhava muito e descontava minhas frustrações na comida. Comia para não ir para casa. Para não perder performance. Minha barriga enorme era 'ok', afinal eu estava ganhando dinheiro. Mas meu corpo começou a dar sinais: metabolismo lento, barriga crescendo, rosto inchado, hormônios descontrolados. Vieram crises de ansiedade, insônia, dores no corpo. Eu tentava emagrecer, mas só sabia fechar a boca e me exercitar mais. Não funcionava. Fiquei frustrado, estressado. Me questionei: 'sou médico, deveria conseguir!' Acabei desenvolvendo hipertensão e pré-diabetes. Até que veio o episódio mais trágico: um ataque de pânico enquanto dirigia. Pensei que fosse infarto, quase morri e bati o carro. Depois de passar pela UTI, percebi que era uma segunda chance. Entendi que não podia continuar daquele jeito. Que precisava mudar. Percebi que meu excesso de peso não era apenas estético — era risco de perder minha vida e deixar minha esposa, filhos e pessoas que amo."
          },
          "webhookUrl": "https://project-neosale-n8n-new.lkqho4.easypanel.host/webhook/lead/analyze",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Sanitize & Meta": {
      "main": [
        [
          {
            "node": "LLM Embedding (lead)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Merge Embedding": {
      "main": [
        [
          {
            "node": "Supabase Match BA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Match BA": {
      "main": [
        [
          {
            "node": "LLM Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Classifier": {
      "main": [
        [
          {
            "node": "LLM Dissector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Dissector": {
      "main": [
        [
          {
            "node": "LLM Critic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Critic": {
      "main": [
        [
          {
            "node": "LLM Angles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Angles": {
      "main": [
        [
          {
            "node": "Fn Merge Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Merge Output": {
      "main": [
        [
          {
            "node": "Supabase Upsert Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fn Lead Hash": {
      "main": [
        [
          {
            "node": "Get Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "data": {
      "main": [
        [
          {
            "node": "Fn Lead Hash",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Upsert Analysis": {
      "main": [
        []
      ]
    },
    "LLM audience": {
      "main": [
        [
          {
            "node": "Fn Sanitize & Meta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM Embedding (lead)": {
      "main": [
        [
          {
            "node": "Fn Merge Embedding",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "LLM audience",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Analysis": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "timezone": "America/Sao_Paulo",
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "Nnv8VpGUKDwsTnBV"
  },
  "versionId": "1bfcc917-4161-4c01-907e-31c45102b243",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "da2acb134fcf366b6f9574bd4cec638ca89885040801d13a4edf5931955c6b8f"
  },
  "id": "QaFdsPZ7fFHFz3jv",
  "tags": []
}